# Generated by Selenium IDE
import pytest
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
import time
import random
import undetected_chromedriver as uc
output_file = "links_estados_unidos_acciones.json"
class TestTestsel():
  def setup_method(self, method):
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_testsel(self):


    options = uc.ChromeOptions()
    options.add_argument("--incognito")
    options.add_argument("--disable-blink-features=AutomationControlled")  # Prevent detection
    options.add_argument("start-maximized")
    options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36")
    #options.add_argument("--load-extension=C:/Users/izelm/AppData/Local/Google/Chrome/User Data/Default/Extensions/epcnnfbjfcgphgdmggkamkmgojdagdnn/")
    self.driver = uc.Chrome(options=options)
    self.driver.get("https://www.investing.com/equities/americas")
    # 1. Click the dropdown to open it
    dropdown_input = WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, "#index-select .dropdown_dropdownInput__i8rbg .select_option__C4QA5"))
    )
    dropdown_input.click()
    print("1. Click the dropdown to open it")
    # 2. Wait for options to be visible
    self.driver.find_element(By.CSS_SELECTOR, "span.select_option__C4QA5")
    print("selected")

   

    mexico_option = WebDriverWait(self.driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//span[contains(text(), 'S&P 500')]"))
    )
    mexico_option.click()
    print("3. Find and click the S&P 500 option")
    time.sleep(3)
    links = [my_elem.get_attribute("href") for my_elem in WebDriverWait(self.driver, 20).until(EC.visibility_of_all_elements_located((By.CSS_SELECTOR, "div[class='datatable-v2_cell__wrapper__7O0wk dynamic-table-v2_desktopFreezeColumnWidth__BKzCe'] > a[href]")))]
    with open(output_file, "w") as f:
            json.dump(links, f, indent=4)
        
    print(f"Extracted {len(links)} links saved to {output_file}")

if __name__ == "__main__":
  test = TestTestsel()
  test.setup_method(None)
  test.test_testsel()
  #test.teardown_method(None)
